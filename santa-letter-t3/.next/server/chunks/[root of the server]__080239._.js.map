{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file:///Users/shiraeisenberg/Documents/GitHub/SantaAI/santa-letter-t3/src/env.js"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  /**\n   * Specify your server-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars.\n   */\n  server: {\n    DATABASE_URL: z.string().url(),\n    NODE_ENV: z\n      .enum([\"development\", \"test\", \"production\"])\n      .default(\"development\"),\n  },\n\n  /**\n   * Specify your client-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars. To expose them to the client, prefix them with\n   * `NEXT_PUBLIC_`.\n   */\n  client: {\n    // NEXT_PUBLIC_CLIENTVAR: z.string(),\n  },\n\n  /**\n   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.\n   * middlewares) or client-side so we need to destruct manually.\n   */\n  runtimeEnv: {\n    DATABASE_URL: process.env.DATABASE_URL,\n    NODE_ENV: process.env.NODE_ENV,\n    // NEXT_PUBLIC_CLIENTVAR: process.env.NEXT_PUBLIC_CLIENTVAR,\n  },\n  /**\n   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially\n   * useful for Docker builds.\n   */\n  skipValidation: !!process.env.SKIP_ENV_VALIDATION,\n  /**\n   * Makes it so that empty strings are treated as undefined. `SOME_VAR: z.string()` and\n   * `SOME_VAR=''` will throw an error.\n   */\n  emptyStringAsUndefined: true,\n});\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,MAAM,CAAA,GAAA,uRAAA,CAAA,YAAS,AAAD,EAAE;IAC3B;;;GAGC,GACD,QAAQ;QACN,cAAc,uLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,UAAU,uLAAA,CAAA,IAAC,CACR,IAAI,CAAC;YAAC;YAAe;YAAQ;SAAa,EAC1C,OAAO,CAAC;IACb;IAEA;;;;GAIC,GACD,QAAQ;IAER;IAEA;;;GAGC,GACD,YAAY;QACV,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,QAAQ;IAEV;IACA;;;GAGC,GACD,gBAAgB,CAAC,CAAC,QAAQ,GAAG,CAAC,mBAAmB;IACjD;;;GAGC,GACD,wBAAwB;AAC1B"}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":["file:///Users/shiraeisenberg/Documents/GitHub/SantaAI/santa-letter-t3/src/server/db/schema.ts"],"sourcesContent":["import { serial, text, timestamp, pgTable } from \"drizzle-orm/pg-core\";\n\nexport const letters = pgTable(\"letters\", {\n  id: serial(\"id\").primaryKey(),\n  childLetterText: text(\"child_letter_text\"),\n  santaResponseText: text(\"santa_response_text\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AAAA;AAAA;;AAEO,MAAM,UAAU,CAAA,GAAA,uJAAA,CAAA,UAAO,AAAD,EAAE,WAAW;IACxC,IAAI,CAAA,GAAA,mKAAA,CAAA,SAAM,AAAD,EAAE,MAAM,UAAU;IAC3B,iBAAiB,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE;IACtB,mBAAmB,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE;IACxB,WAAW,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,cAAc,UAAU,GAAG,OAAO;AACzD"}},
    {"offset": {"line": 164, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":["file:///Users/shiraeisenberg/Documents/GitHub/SantaAI/santa-letter-t3/src/server/db/index.ts"],"sourcesContent":["import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\n\nimport { env } from \"~/env\";\nimport * as schema from \"./schema\";\n\n/**\n * Cache the database connection in development. This avoids creating a new connection on every HMR\n * update.\n */\nconst globalForDb = globalThis as unknown as {\n  conn: postgres.Sql | undefined;\n};\n\nconst conn = globalForDb.conn ?? postgres(env.DATABASE_URL);\nif (env.NODE_ENV !== \"production\") globalForDb.conn = conn;\n\nexport const db = drizzle(conn, { schema });\n"],"names":[],"mappings":";;;AACA;AAEA;AACA;AAJA;;;;;AAMA;;;CAGC,GACD,MAAM,cAAc;AAIpB,MAAM,OAAO,YAAY,IAAI,IAAI,CAAA,GAAA,+LAAA,CAAA,UAAQ,AAAD,EAAE,4GAAA,CAAA,MAAG,CAAC,YAAY;AAC1D,IAAI,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,cAAc,YAAY,IAAI,GAAG;AAE/C,MAAM,KAAK,CAAA,GAAA,4JAAA,CAAA,UAAO,AAAD,EAAE,MAAM;IAAE,QAAA;AAAO"}},
    {"offset": {"line": 190, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":["file:///Users/shiraeisenberg/Documents/GitHub/SantaAI/santa-letter-t3/src/server/api/trpc.ts"],"sourcesContent":["/**\n * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:\n * 1. You want to modify request context (see Part 1).\n * 2. You want to create a new middleware or type of procedure (see Part 3).\n *\n * TL;DR - This is where all the tRPC server stuff is created and plugged in. The pieces you will\n * need to use are documented accordingly near the end.\n */\nimport { initTRPC } from \"@trpc/server\";\nimport superjson from \"superjson\";\nimport { ZodError } from \"zod\";\n\nimport { db } from \"~/server/db\";\n\n/**\n * 1. CONTEXT\n *\n * This section defines the \"contexts\" that are available in the backend API.\n *\n * These allow you to access things when processing a request, like the database, the session, etc.\n *\n * This helper generates the \"internals\" for a tRPC context. The API handler and RSC clients each\n * wrap this and provides the required context.\n *\n * @see https://trpc.io/docs/server/context\n */\nexport const createTRPCContext = async (opts: { headers: Headers }) => {\n  return {\n    db,\n    ...opts,\n  };\n};\n\n/**\n * 2. INITIALIZATION\n *\n * This is where the tRPC API is initialized, connecting the context and transformer. We also parse\n * ZodErrors so that you get typesafety on the frontend if your procedure fails due to validation\n * errors on the backend.\n */\nconst t = initTRPC.context<typeof createTRPCContext>().create({\n  transformer: superjson,\n  errorFormatter({ shape, error }) {\n    return {\n      ...shape,\n      data: {\n        ...shape.data,\n        zodError:\n          error.cause instanceof ZodError ? error.cause.flatten() : null,\n      },\n    };\n  },\n});\n\n/**\n * Create a server-side caller.\n *\n * @see https://trpc.io/docs/server/server-side-calls\n */\nexport const createCallerFactory = t.createCallerFactory;\n\n/**\n * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)\n *\n * These are the pieces you use to build your tRPC API. You should import these a lot in the\n * \"/src/server/api/routers\" directory.\n */\n\n/**\n * This is how you create new routers and sub-routers in your tRPC API.\n *\n * @see https://trpc.io/docs/router\n */\nexport const createTRPCRouter = t.router;\n\n/**\n * Middleware for timing procedure execution and adding an artificial delay in development.\n *\n * You can remove this if you don't like it, but it can help catch unwanted waterfalls by simulating\n * network latency that would occur in production but not in local development.\n */\nconst timingMiddleware = t.middleware(async ({ next, path }) => {\n  const start = Date.now();\n\n  if (t._config.isDev) {\n    // artificial delay in dev\n    const waitMs = Math.floor(Math.random() * 400) + 100;\n    await new Promise((resolve) => setTimeout(resolve, waitMs));\n  }\n\n  const result = await next();\n\n  const end = Date.now();\n  console.log(`[TRPC] ${path} took ${end - start}ms to execute`);\n\n  return result;\n});\n\n/**\n * Public (unauthenticated) procedure\n *\n * This is the base piece you use to build new queries and mutations on your tRPC API. It does not\n * guarantee that a user querying is authorized, but you can still access user session data if they\n * are logged in.\n */\nexport const publicProcedure = t.procedure.use(timingMiddleware);\n"],"names":[],"mappings":"AAAA;;;;;;;CAOC;;;;;;AACD;AACA;AAGA;AAJA;AAEA;;;;;AAgBO,MAAM,oBAAoB,OAAO;IACtC,OAAO;QACL,IAAA,8HAAA,CAAA,KAAE;QACF,GAAG,IAAI;IACT;AACF;AAEA;;;;;;CAMC,GACD,MAAM,IAAI,uSAAA,CAAA,WAAQ,CAAC,OAAO,GAA6B,MAAM,CAAC;IAC5D,aAAa,kMAAA,CAAA,UAAS;IACtB,gBAAe,EAAE,KAAK,EAAE,KAAK,EAAE;QAC7B,OAAO;YACL,GAAG,KAAK;YACR,MAAM;gBACJ,GAAG,MAAM,IAAI;gBACb,UACE,MAAM,KAAK,YAAY,uLAAA,CAAA,WAAQ,GAAG,MAAM,KAAK,CAAC,OAAO,KAAK;YAC9D;QACF;IACF;AACF;AAOO,MAAM,sBAAsB,EAAE,mBAAmB;AAcjD,MAAM,mBAAmB,EAAE,MAAM;AAExC;;;;;CAKC,GACD,MAAM,mBAAmB,EAAE,UAAU,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE;IACzD,MAAM,QAAQ,KAAK,GAAG;IAEtB,IAAI,EAAE,OAAO,CAAC,KAAK,EAAE;QACnB,0BAA0B;QAC1B,MAAM,SAAS,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,OAAO;QACjD,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACrD;IAEA,MAAM,SAAS,MAAM;IAErB,MAAM,MAAM,KAAK,GAAG;IACpB,QAAQ,GAAG,CAAC,CAAC,OAAO,EAAE,KAAK,MAAM,EAAE,MAAM,MAAM,aAAa,CAAC;IAE7D,OAAO;AACT;AASO,MAAM,kBAAkB,EAAE,SAAS,CAAC,GAAG,CAAC"}},
    {"offset": {"line": 262, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file:///Users/shiraeisenberg/Documents/GitHub/SantaAI/santa-letter-t3/src/server/api/routers/post.ts"],"sourcesContent":["import { z } from \"zod\";\n\nimport { createTRPCRouter, publicProcedure } from \"~/server/api/trpc\";\nimport { posts } from \"~/server/db/schema\";\n\nexport const postRouter = createTRPCRouter({\n  hello: publicProcedure\n    .input(z.object({ text: z.string() }))\n    .query(({ input }) => {\n      return {\n        greeting: `Hello ${input.text}`,\n      };\n    }),\n\n  create: publicProcedure\n    .input(z.object({ name: z.string().min(1) }))\n    .mutation(async ({ ctx, input }) => {\n      await ctx.db.insert(posts).values({\n        name: input.name,\n      });\n    }),\n\n  getLatest: publicProcedure.query(async ({ ctx }) => {\n    const post = await ctx.db.query.posts.findFirst({\n      orderBy: (posts, { desc }) => [desc(posts.createdAt)],\n    });\n\n    return post ?? null;\n  }),\n});\n"],"names":[],"mappings":";;;AAEA;AACA;AAHA;;;;AAKO,MAAM,aAAa,CAAA,GAAA,8HAAA,CAAA,mBAAgB,AAAD,EAAE;IACzC,OAAO,8HAAA,CAAA,kBAAe,CACnB,KAAK,CAAC,uLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,MAAM,uLAAA,CAAA,IAAC,CAAC,MAAM;IAAG,IAClC,KAAK,CAAC,CAAC,EAAE,KAAK,EAAE;QACf,OAAO;YACL,UAAU,CAAC,MAAM,EAAE,MAAM,IAAI,EAAE;QACjC;IACF;IAEF,QAAQ,8HAAA,CAAA,kBAAe,CACpB,KAAK,CAAC,uLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,MAAM,uLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IAAG,IACzC,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC7B,MAAM,IAAI,EAAE,CAAC,MAAM,CAAC,+HAAA,CAAA,QAAK,EAAE,MAAM,CAAC;YAChC,MAAM,MAAM,IAAI;QAClB;IACF;IAEF,WAAW,8HAAA,CAAA,kBAAe,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE;QAC7C,MAAM,OAAO,MAAM,IAAI,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC;YAC9C,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,GAAK;oBAAC,KAAK,MAAM,SAAS;iBAAE;QACvD;QAEA,OAAO,QAAQ;IACjB;AACF"}},
    {"offset": {"line": 301, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 379, "column": 0}, "map": {"version":3,"sources":["file:///Users/shiraeisenberg/Documents/GitHub/SantaAI/santa-letter-t3/src/server/api/routers/santa.ts"],"sourcesContent":["import { z } from \"zod\";\nimport { createTRPCRouter, publicProcedure } from \"~/server/api/trpc\";\nimport { letters } from \"~/server/db/schema\";\nimport { Anthropic } from \"@anthropic-ai/sdk\";\nimport { db } from \"~/server/db\";\n\nconst anthropic = new Anthropic({ apiKey: process.env.ANTHROPIC_API_KEY });\n\n\nexport const santaRouter = createTRPCRouter({\n    sendLetter: publicProcedure.input(z.object({\n        childLetterText: z.string().min(10),\n    })).mutation(async ({ input }) => {\n        const childLetter = input.childLetterText;\n\n        const systemPrompt = `You are Santa Claus responding to a child's letter. Keep the response cheerful, warm, and encouraging, but not too long (max 3 sentences).`\n\n        const userPrompt = `${childLetter}`\n\n        try {\n            const response = await anthropic.messages.create({\n                model: \"claude-3-5-sonnet-latest\",\n                max_tokens: 1024,\n                temperature: 0.7,\n                system: systemPrompt,\n                messages: [{ role: \"user\", content: userPrompt }],\n        });\n\n        if (!response.content?.[0] || !('text' in response.content[0])) {\n            throw new Error(\"Invalid response from AI\");\n        }\n\n        const santaResponse = response.content[0].text;\n        console.log(santaResponse);\n        await db.insert(letters).values({\n                childLetterText: childLetter,\n                santaResponseText: santaResponse,\n            });\n            return { success: true, santaResponse: santaResponse };\n        \n        } catch (error) {\n            console.error(\"Error sending letter:\", error);\n            throw new Error(\"Failed to send letter\");\n        }\n        \n    }),\n    \n});\n"],"names":[],"mappings":";;;AACA;AACA;AAEA;AADA;AAHA;;;;;;AAMA,MAAM,YAAY,IAAI,oKAAA,CAAA,YAAS,CAAC;IAAE,QAAQ,QAAQ,GAAG,CAAC,iBAAiB;AAAC;AAGjE,MAAM,cAAc,CAAA,GAAA,8HAAA,CAAA,mBAAgB,AAAD,EAAE;IACxC,YAAY,8HAAA,CAAA,kBAAe,CAAC,KAAK,CAAC,uLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACvC,iBAAiB,uLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IACpC,IAAI,QAAQ,CAAC,OAAO,EAAE,KAAK,EAAE;QACzB,MAAM,cAAc,MAAM,eAAe;QAEzC,MAAM,eAAe,CAAC,0IAA0I,CAAC;QAEjK,MAAM,aAAa,GAAG,aAAa;QAEnC,IAAI;YACA,MAAM,WAAW,MAAM,UAAU,QAAQ,CAAC,MAAM,CAAC;gBAC7C,OAAO;gBACP,YAAY;gBACZ,aAAa;gBACb,QAAQ;gBACR,UAAU;oBAAC;wBAAE,MAAM;wBAAQ,SAAS;oBAAW;iBAAE;YACzD;YAEA,IAAI,CAAC,SAAS,OAAO,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,UAAU,SAAS,OAAO,CAAC,EAAE,GAAG;gBAC5D,MAAM,IAAI,MAAM;YACpB;YAEA,MAAM,gBAAgB,SAAS,OAAO,CAAC,EAAE,CAAC,IAAI;YAC9C,QAAQ,GAAG,CAAC;YACZ,MAAM,8HAAA,CAAA,KAAE,CAAC,MAAM,CAAC,+HAAA,CAAA,UAAO,EAAE,MAAM,CAAC;gBACxB,iBAAiB;gBACjB,mBAAmB;YACvB;YACA,OAAO;gBAAE,SAAS;gBAAM,eAAe;YAAc;QAEzD,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,yBAAyB;YACvC,MAAM,IAAI,MAAM;QACpB;IAEJ;AAEJ"}},
    {"offset": {"line": 434, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 440, "column": 0}, "map": {"version":3,"sources":["file:///Users/shiraeisenberg/Documents/GitHub/SantaAI/santa-letter-t3/src/server/api/root.ts"],"sourcesContent":["import { postRouter } from \"~/server/api/routers/post\";\nimport { createCallerFactory, createTRPCRouter } from \"~/server/api/trpc\";\nimport { santaRouter } from \"~/server/api/routers/santa\";\n/**\n * This is the primary router for your server.\n *\n * All routers added in /api/routers should be manually added here.\n */\nexport const appRouter = createTRPCRouter({\n  post: postRouter,\n  santa: santaRouter,\n});\n\n// export type definition of API\nexport type AppRouter = typeof appRouter;\n\n/**\n * Create a server-side caller for the tRPC API.\n * @example\n * const trpc = createCaller(createContext);\n * const res = await trpc.post.all();\n *       ^? Post[]\n */\nexport const createCaller = createCallerFactory(appRouter);\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAMO,MAAM,YAAY,CAAA,GAAA,8HAAA,CAAA,mBAAgB,AAAD,EAAE;IACxC,MAAM,yIAAA,CAAA,aAAU;IAChB,OAAO,0IAAA,CAAA,cAAW;AACpB;AAYO,MAAM,eAAe,CAAA,GAAA,8HAAA,CAAA,sBAAmB,AAAD,EAAE"}},
    {"offset": {"line": 455, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 461, "column": 0}, "map": {"version":3,"sources":["file:///Users/shiraeisenberg/Documents/GitHub/SantaAI/santa-letter-t3/src/app/api/trpc/%5Btrpc%5D/route.ts"],"sourcesContent":["import { fetchRequestHandler } from \"@trpc/server/adapters/fetch\";\nimport { type NextRequest } from \"next/server\";\n\nimport { env } from \"~/env\";\nimport { appRouter } from \"~/server/api/root\";\nimport { createTRPCContext } from \"~/server/api/trpc\";\n\n/**\n * This wraps the `createTRPCContext` helper and provides the required context for the tRPC API when\n * handling a HTTP request (e.g. when you make requests from Client Components).\n */\nconst createContext = async (req: NextRequest) => {\n  return createTRPCContext({\n    headers: req.headers,\n  });\n};\n\nconst handler = (req: NextRequest) =>\n  fetchRequestHandler({\n    endpoint: \"/api/trpc\",\n    req,\n    router: appRouter,\n    createContext: () => createContext(req),\n    onError:\n      env.NODE_ENV === \"development\"\n        ? ({ path, error }) => {\n            console.error(\n              `❌ tRPC failed on ${path ?? \"<no-path>\"}: ${error.message}`\n            );\n          }\n        : undefined,\n  });\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;AAAA;AAGA;AACA;AACA;AALA;;;;;AAOA;;;CAGC,GACD,MAAM,gBAAgB,OAAO;IAC3B,OAAO,CAAA,GAAA,8HAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,SAAS,IAAI,OAAO;IACtB;AACF;AAEA,MAAM,UAAU,CAAC,MACf,CAAA,GAAA,4RAAA,CAAA,sBAAmB,AAAD,EAAE;QAClB,UAAU;QACV;QACA,QAAQ,8HAAA,CAAA,YAAS;QACjB,eAAe,IAAM,cAAc;QACnC,SACE,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,gBACb,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE;YACd,QAAQ,KAAK,CACX,CAAC,iBAAiB,EAAE,QAAQ,YAAY,EAAE,EAAE,MAAM,OAAO,EAAE;QAE/D,IACA;IACR"}},
    {"offset": {"line": 492, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}